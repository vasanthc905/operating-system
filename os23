#include <stdio.h>
#include <stdlib.h>

#define MAX_MEMORY_SIZE 1000

// Structure to represent a memory block
typedef struct MemoryBlock {
    int id;
    int size;
    int allocated;
} MemoryBlock;

MemoryBlock memory[MAX_MEMORY_SIZE];

// Function to initialize memory blocks
void initializeMemory() {
    for (int i = 0; i < MAX_MEMORY_SIZE; i++) {
        memory[i].id = i;
        memory[i].size = 0;
        memory[i].allocated = 0;
    }
}

// Function to display memory blocks
void displayMemory() {
    printf("Memory Blocks:\n");
    for (int i = 0; i < MAX_MEMORY_SIZE; i++) {
        if (memory[i].size > 0) {
            printf("Block ID: %d, Size: %d, Allocated: %s\n", memory[i].id, memory[i].size,
                   memory[i].allocated ? "Yes" : "No");
        }
    }
}

// Function to allocate memory using First Fit algorithm
void allocateMemory(int processId, int size) {
    for (int i = 0; i < MAX_MEMORY_SIZE; i++) {
        if (!memory[i].allocated && memory[i].size >= size) {
            memory[i].allocated = 1;
            printf("Memory allocated for Process ID %d in Block ID %d\n", processId, memory[i].id);
            break;
        }
    }
}

int main() {
    initializeMemory();

    // Example allocations
    allocateMemory(1, 50);
    allocateMemory(2, 200);
    allocateMemory(3, 100);
    
    displayMemory();

    return 0;
}
